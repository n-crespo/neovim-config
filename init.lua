require("config.lazy")

-- uncomment the below paragraph to enable the R lsp for R-markdown files

-- local on_attach_custom = function(client, bufnr)
--   local function buf_set_option(name, value)
--     vim.api.nvim_buf_set_option(bufnr, name, value)
--   end
--
--   buf_set_option("omnifunc", "v:lua.MiniCompletion.completefunc_lsp")
--
--   -- Mappings are created globally for simplicity
--
--   -- Currently all formatting is handled with 'null-ls' plugin
--   client.resolved_capabilities.document_formatting = false
-- end
-- ---@diagnostic disable-next-line: missing-fields
-- require("lspconfig").r_language_server.setup({
--   on_attach = on_attach_custom,
--   -- Debounce "textDocument/didChange" notifications because they are slowly
--   -- processed (seen when going through completion list with `<C-N>`)
--   flags = { debounce_text_changes = 150 },
-- })

-- TAB-FOR-COMPLETION.lua in lua/

-- return {
--
--   {
--     "L3MON4D3/LuaSnip",
--     keys = function()
--       return {}
--     end,
--   },
--   { -- then: setup supertab in cmp
--     "hrsh7th/nvim-cmp",
--     dependencies = {
--       "hrsh7th/cmp-emoji",
--     },
--     ---@param opts cmp.ConfigSchema
--     opts = function(_, opts)
--       local has_words_before = function()
--         unpack = unpack or table.unpack
--         local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--         return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
--       end
--
--       local luasnip = require("luasnip")
--       local cmp = require("cmp")
--
--       opts.mapping = vim.tbl_extend("force", opts.mapping, {
--         ["<Tab>"] = cmp.mapping(function(fallback)
--           if cmp.visible() then
--             cmp.select_next_item()
--           -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable()
--           -- this way you will only jump inside the snippet region
--           elseif luasnip.expand_or_jumpable() then
--             luasnip.expand_or_jump()
--           elseif has_words_before() then
--             cmp.complete()
--           else
--             fallback()
--           end
--         end, { "i", "s" }),
--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--           if cmp.visible() then
--             cmp.select_prev_item()
--           elseif luasnip.jumpable(-1) then
--             luasnip.jump(-1)
--           else
--             fallback()
--           end
--         end, { "i", "s" }),
--       })
--     end,
--   },
-- }
